{"version":3,"file":"Pong.js","sources":["kotlin/math.kt","../../../../../src/main/kotlin/arena.kt","../../../../../src/main/kotlin/ball.kt","../../../../../src/main/kotlin/bat.kt","../../../../../src/main/kotlin/common.kt","../../../../../src/main/kotlin/main.kt","../../../../../src/main/kotlin/player.kt","../../../../../src/main/kotlin/sfx.kt","../../../../../src/main/kotlin/views.kt","org.w3c/org.w3c.dom.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n",null,null,null,null,null,null,null,null,null],"names":[],"mappings":"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"}